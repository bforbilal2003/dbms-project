CREATE TABLE "User" (
    email VARCHAR(30) PRIMARY KEY,
    name VARCHAR(20),
    password VARCHAR(30),
    lastLogin DATE
);

CREATE INDEX user_email_index ON "User" (email);

CREATE TABLE reservationId (
    id INT PRIMARY KEY
);

INSERT INTO reservationId VALUES(120);

INSERT INTO "User" VALUES('ctfce', 'rfc', 'rcf', '2022-02-20');

CREATE TABLE reservation (
    reservationID INT PRIMARY KEY,
    reservedBy VARCHAR(30),
    roomType VARCHAR(20),
    reservationDate DATE,
    checkoutDate DATE,
    FOREIGN KEY (reservedBy) REFERENCES "User"(email),
    FOREIGN KEY (reservationID) REFERENCES reservationId(id)
);

CREATE INDEX reservation_reservedBy_index ON reservation (reservedBy);
CREATE INDEX reservation_reservationID_index ON reservation (reservationID);

CREATE TABLE delux (
    reservationID INT PRIMARY KEY,
    price INT,
    isAvailable BOOLEAN,
    maxNoOfPeople INT
);

CREATE TABLE premium (
    reservationID INT PRIMARY KEY,
    price INT,
    isAvailable BOOLEAN,
    maxNoOfPeople INT
);

CREATE TABLE suite (
    reservationID INT PRIMARY KEY,
    price INT,
    isAvailable BOOLEAN,
    maxNoOfPeople INT
);

INSERT INTO delux VALUES(1, 100, true, 2);
INSERT INTO premium VALUES(1, 500, true, 4);
INSERT INTO suite VALUES(1, 1000, true, 5);

CREATE OR REPLACE FUNCTION UpdateReservationIdTrigger()
RETURNS TRIGGER AS $$
BEGIN
    INSERT INTO reservation (reservationID, reservedBy, roomType, reservationDate, checkoutDate)
    VALUES (NEW.id, NULL, NULL, NULL, NULL);
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER update_reservation_id_trigger
AFTER UPDATE ON reservationId
FOR EACH ROW
EXECUTE FUNCTION UpdateReservationIdTrigger();

